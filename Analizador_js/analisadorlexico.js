/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analisadorlexico = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[2,8],$V2=[1,10],$V3=[1,11],$V4=[5,8,9,10],$V5=[1,35],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,36],$Va=[2,19],$Vb=[1,47],$Vc=[1,48],$Vd=[1,49],$Ve=[1,50],$Vf=[1,51],$Vg=[1,52],$Vh=[1,45],$Vi=[1,46],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,59],$Vo=[1,58],$Vp=[1,63],$Vq=[1,75],$Vr=[1,76],$Vs=[1,90],$Vt=[1,84],$Vu=[1,85],$Vv=[1,86],$Vw=[1,87],$Vx=[1,88],$Vy=[1,89],$Vz=[1,103],$VA=[1,104],$VB=[2,66],$VC=[2,13,16,34,38,39,40,41,42,54,55,57,62,63,64,68,69],$VD=[2,27],$VE=[1,116],$VF=[1,117],$VG=[1,134],$VH=[1,133],$VI=[1,125],$VJ=[1,126],$VK=[1,127],$VL=[1,128],$VM=[1,129],$VN=[1,130],$VO=[1,131],$VP=[2,53],$VQ=[2,51],$VR=[2,61],$VS=[2,64],$VT=[2,8,9,10,13,16,34,38,39,40,41,42,54,55,57,62,63,64,68,69],$VU=[2,65],$VV=[29,46],$VW=[2,87],$VX=[1,143],$VY=[2,85],$VZ=[2,122],$V_=[1,153],$V$=[1,154],$V01=[1,166],$V11=[1,167],$V21=[1,176],$V31=[1,168],$V41=[1,169],$V51=[1,170],$V61=[1,171],$V71=[1,172],$V81=[1,173],$V91=[1,174],$Va1=[1,175],$Vb1=[1,177],$Vc1=[1,178],$Vd1=[28,29,46,77,78,80,81,82,83,84,85,86,87,88,89,90],$Ve1=[2,25],$Vf1=[2,26],$Vg1=[2,24],$Vh1=[2,89],$Vi1=[1,190],$Vj1=[2,124],$Vk1=[1,194],$Vl1=[2,40],$Vm1=[28,29,46,77,78,81],$Vn1=[28,29,46,77,78,81,82,83,84,85,86,87],$Vo1=[28,29,46,77,78,81,86,87],$Vp1=[28,29,46,77,78,80,81,82,83,84,85,86,87,88],$Vq1=[2,43],$Vr1=[1,235],$Vs1=[1,246];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Inicio":3,"Lista_Plantillas":4,"EOF":5,"Plantilla":6,"Plantillas2":7,"tk_comentario":8,"tk_comentario_multilinea":9,"tk_public":10,"tipo_public":11,"tk_class":12,"tk_identificador":13,"tk_llave_abierta":14,"Instrucciones_class":15,"tk_llave_cerrada":16,"tk_interface":17,"Instrucciones_funciones":18,"metodos":19,"declaracion_variables":20,"Llamada":21,"Instrucciones":22,"funciones":23,"Instrucciones_funciones2":24,"tipo_metodo":25,"tk_parentesis_abierto":26,"parametros":27,"tk_parentesis_cerrado":28,"tk_punto_y_coma":29,"metodos2":30,"tk_static":31,"tk_void":32,"tk_main":33,"tk_String":34,"tk_corchete_abierto":35,"tk_corchete_cerrado":36,"tk_args":37,"tk_string":38,"tk_int":39,"tk_char":40,"tk_double":41,"tk_boolean":42,"parametro1":43,"parametros2":44,"tipo_dato":45,"tk_coma":46,"sentencia_for":47,"sentencia_while":48,"sentencia_do":49,"sentencia_if":50,"imprimir":51,"return":52,"asig":53,"tk_continue":54,"tk_break":55,"lista_expresiones":56,"tk_for":57,"expresion":58,"mas_mas":59,"tk_mas_mas":60,"tk_menos_menos":61,"tk_while":62,"tk_do":63,"tk_if":64,"else":65,"tk_else":66,"opcion_if":67,"tk_return":68,"tk_System":69,"tk_punto":70,"tk_out":71,"tk_print":72,"asignacion":73,"opcion_variable":74,"tk_signo_igual":75,"asig2":76,"tk_and":77,"tk_or":78,"tk_not":79,"tk_signo_menos":80,"tk_xor":81,"tk_mayor_que":82,"tk_menor_que":83,"tk_mayor_igual_que":84,"tk_menor_igual_que":85,"tk_igual_igual":86,"tk_diferente":87,"tk_signo_mas":88,"tk_signo_por":89,"tk_diagonal":90,"tk_numero_entero":91,"tk_cadena":92,"tk_true":93,"tk_false":94,"tk_caracter":95,"valor":96,"valor2":97,"lista_expresiones2":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_comentario",9:"tk_comentario_multilinea",10:"tk_public",12:"tk_class",13:"tk_identificador",14:"tk_llave_abierta",16:"tk_llave_cerrada",17:"tk_interface",26:"tk_parentesis_abierto",28:"tk_parentesis_cerrado",29:"tk_punto_y_coma",31:"tk_static",32:"tk_void",33:"tk_main",34:"tk_String",35:"tk_corchete_abierto",36:"tk_corchete_cerrado",37:"tk_args",38:"tk_string",39:"tk_int",40:"tk_char",41:"tk_double",42:"tk_boolean",46:"tk_coma",54:"tk_continue",55:"tk_break",57:"tk_for",60:"tk_mas_mas",61:"tk_menos_menos",62:"tk_while",63:"tk_do",64:"tk_if",66:"tk_else",68:"tk_return",69:"tk_System",70:"tk_punto",71:"tk_out",72:"tk_print",75:"tk_signo_igual",77:"tk_and",78:"tk_or",79:"tk_not",80:"tk_signo_menos",81:"tk_xor",82:"tk_mayor_que",83:"tk_menor_que",84:"tk_mayor_igual_que",85:"tk_menor_igual_que",86:"tk_igual_igual",87:"tk_diferente",88:"tk_signo_mas",89:"tk_signo_por",90:"tk_diagonal",91:"tk_numero_entero",92:"tk_cadena",93:"tk_true",94:"tk_false",95:"tk_caracter"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[7,2],[7,2],[7,2],[7,0],[6,2],[11,5],[11,5],[11,2],[15,2],[15,2],[15,2],[15,2],[15,2],[15,2],[15,0],[18,2],[18,2],[18,2],[18,0],[24,2],[24,2],[24,2],[24,0],[23,7],[19,2],[30,8],[30,12],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[27,2],[27,0],[43,2],[44,3],[44,0],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,0],[21,5],[21,2],[47,11],[47,2],[59,1],[59,1],[48,7],[49,9],[50,8],[65,2],[65,0],[67,1],[67,3],[52,3],[52,2],[51,9],[51,2],[20,5],[20,2],[73,2],[73,0],[74,4],[74,0],[53,2],[76,3],[76,2],[76,2],[58,3],[58,3],[58,2],[58,2],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,3],[96,2],[97,3],[97,1],[97,1],[97,0],[56,2],[56,0],[98,3],[98,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:


        return{
                lista_tokens: lista_tokens,
                lista_errores: lista_errores,
                lista_error_sintactico
        };


break;
case 12:
   console.log("error sintactico -> fila: " + this._$.first_line);
             lista_error_sintactico.push(new Tokensjavascript("Error Sintactico en la fila: " + this._$.first_line + " y columna: " + this._$.first_column, yytext, this._$.first_line, this._$.first_column)); 
             
break;
case 68: case 70: case 85:
   console.log("error sintactico -> LINEA: " + this._$.first_line);
                lista_error_sintactico.push(new Tokensjavascript("Error Sintactico en la fila: " + this._$.first_line + " y columna: " + this._$.first_column, yytext, this._$.first_line, this._$.first_column));
                
break;
case 83:
   console.log("error sintactico -> LINEA: " + this._$.first_line);
        lista_error_sintactico.push(new Tokensjavascript("Error Sintactico en la fila: " + this._$.first_line + " y columna: " + this._$.first_column, yytext, this._$.first_line, this._$.first_column));
        
break;
case 123:

                                                          this.$ = new Nodo("Lista_expresiones", "Lista_expresiones");
                                                          this.$.agregarHijo($$[$0-1].nodo);
                                                          if($$[$0]){
                                                                this.$.agregarHijo($$[$0].nodo);
                                                          }
                                                          console.log($$[$0-2])
                                                        
break;
}
},
table: [{3:1,4:2,6:3,8:[1,4],9:[1,5],10:$V0},{1:[3]},{5:[1,7]},{5:$V1,6:9,7:8,8:$V2,9:$V3,10:$V0},{5:$V1,6:9,7:12,8:$V2,9:$V3,10:$V0},{5:$V1,6:9,7:13,8:$V2,9:$V3,10:$V0},{2:[1,17],11:14,12:[1,15],17:[1,16]},{1:[2,1]},{5:[2,2]},{5:$V1,6:9,7:18,8:$V2,9:$V3,10:$V0},{5:$V1,6:9,7:19,8:$V2,9:$V3,10:$V0},{5:$V1,6:9,7:20,8:$V2,9:$V3,10:$V0},{5:[2,3]},{5:[2,4]},o($V4,[2,9]),{13:[1,21]},{13:[1,22]},{16:[1,23]},{5:[2,5]},{5:[2,6]},{5:[2,7]},{14:[1,24]},{14:[1,25]},o($V4,[2,12]),{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:26,16:$Va,18:37,19:27,20:28,21:29,22:30,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{8:[1,61],9:[1,62],10:$Vp,16:[2,23],18:60,23:53},{16:[1,64]},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:65,16:$Va,18:37,19:27,20:28,21:29,22:66,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:67,16:$Va,18:37,19:27,20:28,21:29,22:68,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:69,16:$Va,18:37,19:27,20:28,21:29,22:70,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:71,16:$Va,18:37,19:27,20:28,21:29,22:30,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vq,9:$Vr,10:$V8,13:$V9,15:72,16:$Va,18:37,19:27,20:28,21:29,22:73,23:77,24:74,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vq,9:$Vr,10:$V8,13:$V9,15:78,16:$Va,18:37,19:27,20:28,21:29,22:79,23:77,24:80,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{25:82,30:81,31:[1,83],32:$Vs,34:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy},{13:[1,91]},{16:[1,93],29:[1,92]},{26:[1,94],60:[1,97],61:[1,98],75:[1,96],76:95},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:99,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:105,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:106,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:107,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:108,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:109,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:110,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:111,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{29:[1,112]},{29:[1,113]},{13:[2,44]},{13:[2,45]},{13:[2,46]},{13:[2,47]},{13:[2,48]},{13:[2,50]},o($VC,$VD,{24:114,23:115,8:$VE,9:$VF,10:$Vp}),{26:[1,118]},{26:[1,119]},{14:[1,120]},{26:[1,121]},{70:[1,122]},{13:$VG,26:$VH,29:[1,124],58:123,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{16:[1,135]},{8:$VE,9:$VF,10:$Vp,16:$VD,23:115,24:74},{8:$VE,9:$VF,10:$Vp,16:$VD,23:115,24:80},{25:136,32:$Vs,34:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy},o($V4,[2,10]),{16:[2,13]},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:71,16:$VP,18:37,19:27,20:28,21:29,22:30,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{16:[2,14]},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:71,16:$VQ,18:37,19:27,20:28,21:29,22:30,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{16:[2,15]},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:71,16:$VR,18:37,19:27,20:28,21:29,22:30,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{16:[2,16]},{16:[2,17]},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:71,16:$VS,18:37,19:27,20:28,21:29,22:30,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},o($VT,[2,21]),{2:$V5,8:$Vq,9:$Vr,10:$V8,13:$V9,15:72,16:$Va,18:37,19:27,20:28,21:29,22:73,23:77,24:137,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vq,9:$Vr,10:$V8,13:$V9,15:78,16:$Va,18:37,19:27,20:28,21:29,22:79,23:77,24:138,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},o($VC,$VD,{23:115,24:139,8:$VE,9:$VF,10:$Vp}),{16:[2,18]},{2:$V5,8:$V6,9:$V7,10:$V8,13:$V9,15:71,16:$VU,18:37,19:27,20:28,21:29,22:30,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},o($VT,[2,22]),o($VT,[2,29]),{13:[1,140]},{32:[1,141]},{13:[2,32]},{13:[2,33]},{13:[2,34]},{13:[2,35]},{13:[2,36]},{13:[2,37]},{13:[2,38]},o($VV,$VW,{73:142,75:$VX}),o($VT,$VY),o($VT,[2,70]),{13:$VG,26:$VH,28:$VZ,56:144,58:145,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},o($VT,[2,90]),{13:$VG,26:$VH,58:146,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{29:[1,147]},{29:[1,148]},o($VT,[2,52]),{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:149,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:150,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:151,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$V_,9:$V$,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:152,23:77,24:74,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$V_,9:$V$,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:155,23:77,24:80,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},o($VT,[2,54]),o($VT,[2,55]),o($VT,[2,56]),o($VT,[2,57]),o($VT,[2,58]),o($VT,[2,59]),o($VT,[2,60]),o($VT,[2,62]),o($VT,[2,63]),o($VT,[2,20]),o($VC,$VD,{23:115,24:156,8:$VE,9:$VF,10:$Vp}),o($VC,$VD,{23:115,24:157,8:$VE,9:$VF,10:$Vp}),o($VC,$VD,{23:115,24:158,8:$VE,9:$VF,10:$Vp}),{2:[1,160],20:159,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34},{13:$VG,26:$VH,58:161,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:162,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{13:$VG,26:$VH,58:163,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{71:[1,164]},{29:[1,165],77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1},o($VT,[2,81]),{13:$VG,26:$VH,58:179,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:180,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},o($Vd1,[2,109]),o($Vd1,[2,110]),o($Vd1,[2,111]),o($Vd1,[2,112]),o($Vd1,[2,113]),o($Vd1,[2,114]),{13:$VG,26:$VH,58:181,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},o($Vd1,[2,120],{97:182,26:[1,183],60:[1,184],61:[1,185]}),o($V4,[2,11]),{13:[1,186]},o($VT,$Ve1),o($VT,$Vf1),o($VT,$Vg1),{26:[1,187]},{33:[1,188]},{29:$Vh1,46:$Vi1,74:189},{13:$VG,26:$VH,58:191,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{28:[1,192]},{28:$Vj1,46:$Vk1,77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1,98:193},{29:[1,195],77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1},o($VT,[2,92]),o($VT,[2,93]),o($VT,$VQ),o($VT,$VP),o($VT,$VR),o($VT,$VS),{2:$V5,8:$V_,9:$V$,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:152,23:77,24:137,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{2:$V5,8:$V_,9:$V$,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:155,23:77,24:138,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},o($VT,$VU),o($VT,$Vg1),o($VT,$Ve1),o($VT,$Vf1),{13:$VG,26:$VH,58:196,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{29:[1,197]},{28:[1,198],77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1},{16:[1,199]},{28:[1,200],77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1},{70:[1,201]},o($VT,[2,80]),{13:$VG,26:$VH,58:202,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:203,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:204,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:205,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:206,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:207,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:208,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:209,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:210,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:211,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:212,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:213,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{13:$VG,26:$VH,58:214,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},o($Vd1,[2,96]),o($Vd1,[2,97]),{28:[1,215],77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1},o($Vd1,[2,116]),{13:$VG,26:$VH,28:$VZ,56:216,58:145,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},o($Vd1,[2,118]),o($Vd1,[2,119]),{26:[1,217]},{27:218,28:$Vl1,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:219,45:220},{26:[1,221]},{29:[1,222]},{13:[1,223]},o($VV,[2,86],{77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1}),{29:[1,224]},{28:[2,121]},{13:$VG,26:$VH,58:225,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},o($VT,[2,91]),{29:[1,226],77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1},o([13,26,79,80,91,92,93,94,95],$VY),{14:[1,227]},{62:[1,228]},{14:[1,229]},{72:[1,230]},o($Vm1,[2,94],{80:$V21,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1}),o($Vm1,[2,95],{80:$V21,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1}),o($Vm1,[2,98],{80:$V21,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1}),o($Vn1,[2,99],{80:$V21,88:$Va1,89:$Vb1,90:$Vc1}),o($Vn1,[2,100],{80:$V21,88:$Va1,89:$Vb1,90:$Vc1}),o($Vn1,[2,101],{80:$V21,88:$Va1,89:$Vb1,90:$Vc1}),o($Vn1,[2,102],{80:$V21,88:$Va1,89:$Vb1,90:$Vc1}),o($Vo1,[2,103],{80:$V21,82:$V41,83:$V51,84:$V61,85:$V71,88:$Va1,89:$Vb1,90:$Vc1}),o($Vo1,[2,104],{80:$V21,82:$V41,83:$V51,84:$V61,85:$V71,88:$Va1,89:$Vb1,90:$Vc1}),o($Vp1,[2,105],{89:$Vb1,90:$Vc1}),o($Vp1,[2,106],{89:$Vb1,90:$Vc1}),o($Vd1,[2,107]),o($Vd1,[2,108]),o($Vd1,[2,115]),{28:[1,231]},{27:232,28:$Vl1,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:219,45:220},{28:[1,233]},{28:$Vq1,44:234,46:$Vr1},{13:[1,236]},{34:[1,237]},o([2,8,9,10,13,16,26,34,38,39,40,41,42,54,55,57,62,63,64,68,69,79,80,91,92,93,94,95],[2,84]),o($VV,$VW,{73:238,75:$VX}),o($VT,[2,67]),{28:$Vj1,46:$Vk1,77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1,98:239},{13:[1,240]},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:241,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{26:[1,242]},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:243,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{26:[1,244]},o($Vd1,[2,117]),{28:[1,245]},{14:[1,247],29:$Vs1},{28:[2,39]},{34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:248,45:220},o([28,46],[2,41]),{35:[1,249]},{29:$Vh1,46:$Vi1,74:250},{28:[2,123]},{59:251,60:[1,252],61:[1,253]},{16:[1,254]},{13:$VG,26:$VH,58:255,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{16:[1,256]},{13:$VG,26:$VH,58:257,79:$VI,80:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:132},{29:$Vs1},o($VT,[2,28]),{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:258,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},{28:$Vq1,44:259,46:$Vr1},{36:[1,260]},{29:[2,88]},{28:[1,261]},{28:[2,71]},{28:[2,72]},o($VT,[2,73]),{28:[1,262],77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1},o($VT,[2,77],{65:263,66:[1,264]}),{28:[1,265],77:$V01,78:$V11,80:$V21,81:$V31,82:$V41,83:$V51,84:$V61,85:$V71,86:$V81,87:$V91,88:$Va1,89:$Vb1,90:$Vc1},{16:[1,266]},{28:[2,42]},{37:[1,267]},{14:[1,268]},{29:[1,269]},o($VT,[2,75]),{14:[1,272],50:271,64:$Vm,67:270},{29:[1,273]},o($VT,[2,30]),{28:[1,274]},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:275,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},o($VT,[2,74]),o($VT,[2,76]),o($VT,[2,78]),{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:276,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},o($VT,[2,82]),{14:[1,277]},{16:[1,278]},{16:[1,279]},{2:$V5,8:$Vz,9:$VA,10:$V8,13:$V9,16:$VB,18:37,19:101,20:100,21:102,22:280,23:53,34:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,45:34,47:38,48:39,49:40,50:41,51:42,52:43,53:44,54:$Vh,55:$Vi,57:$Vj,62:$Vk,63:$Vl,64:$Vm,68:$Vn,69:$Vo},o($VT,[2,69]),o($VT,[2,79]),{16:[1,281]},o($VT,[2,31])],
defaultActions: {7:[2,1],8:[2,2],12:[2,3],13:[2,4],18:[2,5],19:[2,6],20:[2,7],47:[2,44],48:[2,45],49:[2,46],50:[2,47],51:[2,48],52:[2,50],65:[2,13],67:[2,14],69:[2,15],71:[2,16],72:[2,17],78:[2,18],84:[2,32],85:[2,33],86:[2,34],87:[2,35],88:[2,36],89:[2,37],90:[2,38],193:[2,121],234:[2,39],239:[2,123],250:[2,88],252:[2,71],253:[2,72],259:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Nodo = require('./nodo_arbol');
    const Tokensjavascript = require('./Tokensjavascript');
    const Erroresjavascript = require('./Erroresjavascript');
    var lista_tokens = [];
    var lista_errores = [];
    var lista_error_sintactico = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*omitir espacios en blanco*/ 
break;
case 1: lista_tokens.push(new Tokensjavascript("Comentario", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 8;
break;
case 2: lista_tokens.push(new Tokensjavascript("Comentario Multilinea", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9; 
break;
case 3: /*se ignoran*/ 
break;
case 4: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 10;
break;
case 5: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 31;
break;
case 6: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 33;
break;
case 7: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 37;
break;
case 8: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 12;
break;
case 9: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 17;
break;
case 10: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 32;
break;
case 11: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 55;
break;
case 12: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 54;
break;
case 13: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 68;
break;
case 14: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 93;
break;
case 15: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 94;
break;
case 16: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 69;
break;
case 17: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 71;
break;
case 18: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 72;
break;
case 19: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 72;
break;
case 20: lista_tokens.push(new Tokensjavascript("Palabra Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 'tk_println';
break;
case 21: lista_tokens.push(new Tokensjavascript("Tipo de Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 39;
break;
case 22: lista_tokens.push(new Tokensjavascript("Tipo de Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 38;
break;
case 23: lista_tokens.push(new Tokensjavascript("Tipo de Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 42;
break;
case 24: lista_tokens.push(new Tokensjavascript("Tipo de Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 41;
break;
case 25: lista_tokens.push(new Tokensjavascript("Tipo de Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 34;
break;
case 26: lista_tokens.push(new Tokensjavascript("Tipo de Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 40;
break;
case 27: lista_tokens.push(new Tokensjavascript("Ciclo", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 57;
break;
case 28: lista_tokens.push(new Tokensjavascript("Ciclo", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 62;
break;
case 29: lista_tokens.push(new Tokensjavascript("Ciclo", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 63;
break;
case 30: lista_tokens.push(new Tokensjavascript("Sentencia", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 64;
break;
case 31: lista_tokens.push(new Tokensjavascript("Sentencia", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 66;
break;
case 32: lista_tokens.push(new Tokensjavascript("Cadena", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 92; 
break;
case 33: lista_tokens.push(new Tokensjavascript("Caracter", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 95; 
break;
case 34: lista_tokens.push(new Tokensjavascript("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 46;
break;
case 35: lista_tokens.push(new Tokensjavascript("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 70;
break;
case 36: lista_tokens.push(new Tokensjavascript("Punto y Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 29;
break;
case 37: lista_tokens.push(new Tokensjavascript("Parentesis Abierto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 26;
break;
case 38: lista_tokens.push(new Tokensjavascript("Parentesis Cerrado", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 28;
break;
case 39: lista_tokens.push(new Tokensjavascript("Llave Abierta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 14;
break;
case 40: lista_tokens.push(new Tokensjavascript("Llave Cerrada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 16;
break;
case 41: lista_tokens.push(new Tokensjavascript("Mas Mas", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 60;
break;
case 42: lista_tokens.push(new Tokensjavascript("Menos Menos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 61;
break;
case 43: lista_tokens.push(new Tokensjavascript("Mayor Igual Que", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 84;
break;
case 44: lista_tokens.push(new Tokensjavascript("Menor Igual Que", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 85;
break;
case 45: lista_tokens.push(new Tokensjavascript("Mayor Que", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 82;
break;
case 46: lista_tokens.push(new Tokensjavascript("Menor Que", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 83;
break;
case 47: lista_tokens.push(new Tokensjavascript("And", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 77;
break;
case 48: lista_tokens.push(new Tokensjavascript("Or", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 78;
break;
case 49: lista_tokens.push(new Tokensjavascript("Igual Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 86;
break;
case 50: lista_tokens.push(new Tokensjavascript("Diferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 87;
break;
case 51: lista_tokens.push(new Tokensjavascript("Signo Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 75;
break;
case 52: lista_tokens.push(new Tokensjavascript("Signo Mas", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 88;
break;
case 53: lista_tokens.push(new Tokensjavascript("Signo Menos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 80;
break;
case 54: lista_tokens.push(new Tokensjavascript("Signo Por", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 89;
break;
case 55: lista_tokens.push(new Tokensjavascript("Diagonal", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 90;
break;
case 56: lista_tokens.push(new Tokensjavascript("Corchete Abierto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 35;
break;
case 57: lista_tokens.push(new Tokensjavascript("Corchete Cerrado", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 36;
break;
case 58: lista_tokens.push(new Tokensjavascript("Dos Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 'tk_dos_puntos';
break;
case 59: lista_tokens.push(new Tokensjavascript("Guion Bajo", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 'tk_guion_bajo';
break;
case 60: lista_tokens.push(new Tokensjavascript("Not", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 79;
break;
case 61: lista_tokens.push(new Tokensjavascript("Xor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 81;
break;
case 62: lista_tokens.push(new Tokensjavascript("Numero Entero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 91;
break;
case 63: lista_tokens.push(new Tokensjavascript("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));return 13;
break;
case 64: return 5;
break;
case 65: lista_errores.push(new Erroresjavascript("Error Lexico", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\t\r\n\f]+)/,/^(?:public\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:args\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:int\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*[\'])/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\+\+)/,/^(?:--)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:_\b)/,/^(?:!)/,/^(?:\^)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analisadorlexico;
exports.Parser = analisadorlexico.Parser;
exports.parse = function () { return analisadorlexico.parse.apply(analisadorlexico, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}